{
	"name": "pa186030_UseCase2_dataflow",
	"properties": {
		"folder": {
			"name": "pa186030_dataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_json_source_ds",
						"type": "DatasetReference"
					},
					"name": "CustomerSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_json_check",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerData as (CustomerID as string, CustomerName as string, CustomerLocation as (City as string, State as string, Country as string))[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomerSource",
				"CustomerSource foldDown(unroll(CustomerData, CustomerData),",
				"     mapColumn(",
				"          CustomerID = CustomerData.CustomerID,",
				"          CustomerName = CustomerData.CustomerName,",
				"          CustomerLocation = CustomerData.CustomerLocation",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(, CustomerLocation { }),",
				"     mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          CustomerCity = CustomerLocation.City,",
				"          CustomerState = CustomerLocation.State,",
				"          CustomerCountry = CustomerLocation.Country",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerData as (CustomerID as string, CustomerName as string, CustomerLocation as (City as string, State as string, Country as string))[]",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}