{
	"name": "pa186030_UseCase2_dataflow",
	"properties": {
		"folder": {
			"name": "pa186030_dataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_json_source_ds",
						"type": "DatasetReference"
					},
					"name": "CustomerSource"
				},
				{
					"dataset": {
						"referenceName": "pa186030_loan_source_ds",
						"type": "DatasetReference"
					},
					"name": "LoanSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_json_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "pa186030_loan_json_csv",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "sort2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerData as (CustomerID as string, CustomerName as string, CustomerLocation as (City as string, State as string, Country as string))[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> CustomerSource",
				"source(output(",
				"          LoanData as (BorrowerID as string, EMIAmount as double, InterestRate as double, LoanAccountNumber as string, LoanAmount as integer, LoanID as string, LoanStatus as string, LoanTerm as short, LoanType as string, MonthlyPaymentDay as short, OriginationDate as date)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> LoanSource",
				"CustomerSource foldDown(unroll(CustomerData, CustomerData),",
				"     mapColumn(",
				"          CustomerID = CustomerData.CustomerID,",
				"          CustomerName = CustomerData.CustomerName,",
				"          CustomerCity = CustomerData.CustomerLocation.City,",
				"          CustomerState = CustomerData.CustomerLocation.State,",
				"          CustomerCountry = CustomerData.CustomerLocation.Country",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(CustomerName = initCap(CustomerName)) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(CustomerID),",
				"     each(match(name!='CustomerID'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sort(asc(CustomerID, true)) ~> sort1",
				"LoanSource foldDown(unroll(LoanData, LoanData),",
				"     mapColumn(",
				"          BorrowerID = LoanData.BorrowerID,",
				"          EMIAmount = LoanData.EMIAmount,",
				"          InterestRate = LoanData.InterestRate,",
				"          LoanAccountNumber = LoanData.LoanAccountNumber,",
				"          LoanAmount = LoanData.LoanAmount,",
				"          LoanID = LoanData.LoanID,",
				"          LoanStatus = LoanData.LoanStatus,",
				"          LoanTerm = LoanData.LoanTerm,",
				"          LoanType = LoanData.LoanType,",
				"          MonthlyPaymentDay = LoanData.MonthlyPaymentDay,",
				"          OriginationDate = LoanData.OriginationDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 aggregate(groupBy(BorrowerID,",
				"          LoanID),",
				"     each(match(name!='BorrowerID'&&name!='LoanID'), $$ = first($$))) ~> aggregate2",
				"aggregate2 sort(asc(BorrowerID, true),",
				"     asc(LoanID, true)) ~> sort2",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          Price as string,",
				"          OrderDate as string,",
				"          Region as string",
				"     ),",
				"     partitionFileNames:[('customer_json.csv')],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"sort2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          Price as string,",
				"          OrderDate as string,",
				"          Region as string",
				"     ),",
				"     partitionFileNames:['\\'loan_json.csv\\''],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}