{
	"name": "pa186030_UseCase1_dataflow",
	"properties": {
		"folder": {
			"name": "pa186030_dataflow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_source_ds",
						"type": "DatasetReference"
					},
					"name": "CustomerSource"
				},
				{
					"dataset": {
						"referenceName": "pa186030_sales_source_ds",
						"type": "DatasetReference"
					},
					"name": "SalesSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pa186030_customer_sales_df_sink_ds",
						"type": "DatasetReference"
					},
					"name": "OutputToSink"
				},
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CustomerTransformation"
				},
				{
					"name": "GroupByCustomerID"
				},
				{
					"name": "SalesTransformation"
				},
				{
					"name": "GroupByProductIDRegion"
				},
				{
					"name": "JoinCustomerSales"
				},
				{
					"name": "SelectCustomerColumns"
				},
				{
					"name": "SelectSalesColumns"
				},
				{
					"name": "SortCustomerByCustomerID"
				},
				{
					"name": "filter1"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     fileName as string",
				"}",
				"source(output(",
				"          CustomerID as short,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Address as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CustomerSource",
				"source(output(",
				"          OrderID as short,",
				"          CustomerID as short,",
				"          ProductID as short,",
				"          Quantity as short,",
				"          Price as short,",
				"          OrderDate as string,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SalesSource",
				"CustomerSource derive(FirstName = initCap(lower(FirstName)),",
				"          LastName = initCap(lower(LastName)),",
				"          FullName = initCap(lower(FirstName))+\" \"+initCap(lower(LastName)),",
				"          Email = trim(lower(Email)),",
				"          Address = replace(Address , '$','')) ~> CustomerTransformation",
				"CustomerTransformation aggregate(groupBy(CustomerID),",
				"     each(match(name!='CustomerID'), $$ = first($$))) ~> GroupByCustomerID",
				"SalesSource derive(OrderYear = year(toDate(OrderDate, 'MM/dd/yy', 'en-US')),",
				"          DateDifference = currentDate()-toDate(OrderDate, 'MM/dd/yy', 'en-US')) ~> SalesTransformation",
				"SalesTransformation aggregate(groupBy(ProductID,",
				"          Region),",
				"     each(match(name!='ProductID'&&name!='Region'), $$ = first($$)),",
				"          Avg_Quantity = avg(Quantity),",
				"          Min_Quantity = min(Quantity),",
				"          Max_Quantity = max(Quantity),",
				"          Avg_Price = avg(Price),",
				"          Min_Price = min(Price),",
				"          Max_Price = max(Price),",
				"          Total_Sales = sum(Quantity*Price)) ~> GroupByProductIDRegion",
				"SelectCustomerColumns, SelectSalesColumns join(SelectCustomerColumns@CustomerID == SelectSalesColumns@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustomerSales",
				"GroupByCustomerID select(mapColumn(",
				"          CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          FullName,",
				"          Email,",
				"          Address,",
				"          City,",
				"          Country,",
				"          Country_Abbrevation",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCustomerColumns",
				"filter1 select(mapColumn(",
				"          ProductID,",
				"          Region,",
				"          OrderID,",
				"          CustomerID,",
				"          Quantity,",
				"          Price,",
				"          OrderDate,",
				"          OrderYear,",
				"          DateDifference,",
				"          Avg_Quantity,",
				"          Min_Quantity,",
				"          Max_Quantity,",
				"          Avg_Price,",
				"          Min_Price,",
				"          Max_Price,",
				"          Total_Sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSalesColumns",
				"JoinCustomerSales sort(asc(SelectCustomerColumns@CustomerID, true)) ~> SortCustomerByCustomerID",
				"GroupByProductIDRegion filter(and(Quantity>10, Price>=10)) ~> filter1",
				"SelectSalesColumns lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"SortCustomerByCustomerID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as string,",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          Price as string,",
				"          OrderDate as string,",
				"          Region as string",
				"     ),",
				"     partitionFileNames:[($fileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputToSink",
				"lookup1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}