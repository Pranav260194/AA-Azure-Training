{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "td-aa-trng-adf"
		},
		"blob_employee_trigger_properties_Etl_Control_Framework_Start_parameters_file_name": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.fileName"
		},
		"blob_employee_trigger_properties_Etl_Control_Framework_Start_parameters_folder_name": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.folderPath"
		},
		"blob_employee_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1f037183-21d0-4c33-8356-296f23107c7c/resourceGroups/td-aa-trng-rg/providers/Microsoft.Storage/storageAccounts/tdaastrgpoc"
		},
		"blob_insurance_trigger_properties_Etl_Control_Framework_Start_parameters_file_name": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.fileName"
		},
		"blob_insurance_trigger_properties_Etl_Control_Framework_Start_parameters_folder_name": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.folderPath"
		},
		"blob_insurance_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1f037183-21d0-4c33-8356-296f23107c7c/resourceGroups/td-aa-trng-rg/providers/Microsoft.Storage/storageAccounts/tdaastrgpoc"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bg255026_datadlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "bg255026_datadlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete from Inbound",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "inbound csv to input parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "pb255086_delete",
								"type": "DatasetReference",
								"parameters": {
									"sourceContainer": "@activity('lookup_parameter').output.firstRow.sourceContainer",
									"sourceDirectory": "@activity('lookup_parameter').output.firstRow.sourceDirectory",
									"sourceFileName": "@activity('lookup_parameter').output.firstRow.sourceFileName"
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "adls_ls",
									"type": "LinkedServiceReference"
								},
								"path": "pb255086/stage"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "lookup_parameter",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "pb255086_cargoF",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "inbound csv to input parquet",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lookup_parameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cargoId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cargoId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "shipmentDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "shipmentDate",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "catagry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "catagry",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "filghtNo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "filghtNo",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pb255086_flat_file_sourse_ds_for_parameter",
								"type": "DatasetReference",
								"parameters": {
									"sourceDirectory": {
										"value": "@activity('lookup_parameter').output.firstRow.sourceDirectory",
										"type": "Expression"
									},
									"sourceContainer": {
										"value": "@activity('lookup_parameter').output.firstRow.sourceContainer\n",
										"type": "Expression"
									},
									"sourceFileName": {
										"value": "@activity('lookup_parameter').output.firstRow.sourceFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "pb255086_Parquet2",
								"type": "DatasetReference",
								"parameters": {
									"destContainer": {
										"value": "@activity('lookup_parameter').output.firstRow.destContainer",
										"type": "Expression"
									},
									"destDirectory": {
										"value": "@activity('lookup_parameter').output.firstRow.destDirectory   ",
										"type": "Expression"
									},
									"destFileName": {
										"value": "@activity('lookup_parameter').output.firstRow.destFileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Execute move and delete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete from Inbound",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pb255086_moveanddelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Execute move and delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/pb255086/pb255086"
						},
						"linkedServiceName": {
							"referenceName": "adb_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "file_list",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "To check inbound dir empty or not",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Get Metadata1').output.childItems)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Inbound Dir is Empty",
										"errorCode": "404"
									}
								}
							]
						}
					},
					{
						"name": "To check inbound have para files or not",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "To check inbound dir empty or not",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(\ncontains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name2),'\"',',','\"type\":\"File\"}'))),\nif(\ncontains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name1),'\"',',','\"type\":\"File\"}'))),1,0),0)\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail2",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@concat(if(\ncontains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name2),'\"',',','\"type\":\"File\"}'))),\npipeline().parameters.file_name1,\nif(contains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name1),'\"',',','\"type\":\"File\"}'))),pipeline().parameters.file_name2,'Both the files')),\n' is not present in inbound dir')",
											"type": "Expression"
										},
										"errorCode": "404"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "subppl_of_ppl4",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "To check inbound have para files or not",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/vu255001/Demo",
							"baseParameters": {
								"file_name1": {
									"value": "@pipeline().parameters.file_name1",
									"type": "Expression"
								},
								"file_name2": {
									"value": "@pipeline().parameters.file_name2",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "adb_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Para files faliure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "To check inbound have para files or not",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-03.eastus.logic.azure.com:443/workflows/a7b63c7c6bc8404e988f8e59f85eec3b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=U-sh46Sz2oePKsX8FuGSRUhD9Q_cs5AXvS2JfrSNBfc",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"Subject\":\"Faluire of inbound to input transfer activity\",\n    \"DataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"PipelineName\" : \"@{pipeline().Pipeline}\", \n    \"EmailTo\" : \"@{pipeline().parameters.email_id}\",\n    \"ErrorMessage\" : \"404\",\n    \"Activity\" : \"@{concat(if(\ncontains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name2),'\"',',','\"type\":\"File\"}'))),\npipeline().parameters.file_name1,\nif(contains(activity('Get Metadata1').output.childitems,\njson(concat('{\"name\":','\"',string(pipeline().parameters.file_name1),'\"',',','\"type\":\"File\"}'))),pipeline().parameters.file_name2,'Both the files')),\n' is not present in inbound dir')}\",\n    \"FileName\":\"Check-in and Inflight service\"\n    \n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Pipeline success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Notebook1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-20.eastus.logic.azure.com:443/workflows/144ac395e1c34d1cb5fd524e6e239575/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=o-2Wx_7w9CoOX5RTkJEZhaLrC8e5IsKBx0pOdX-lWV8",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"Subject\":\"Success\",\n    \"FileName\":\"Check-in and Inflight service\",\n    \"DataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"PipelineName\" : \"@{pipeline().Pipeline}\", \n    \"EmailTo\" : \"@{pipeline().parameters.email_id}\",\n    \n    \n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"file_name1": {
						"type": "string",
						"defaultValue": "Table1.csv"
					},
					"file_name2": {
						"type": "string",
						"defaultValue": "Table2.csv"
					},
					"email_id": {
						"type": "string",
						"defaultValue": "visu.utkarsh@teradata.com"
					}
				},
				"folder": {
					"name": "vu255001"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ru255006_data_flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ru255006_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"output1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sh186013_adf_DataXfrom1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"DataFlowSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "sh186013"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sm255207_rim_hist_aggr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RIM_source",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"genreasoninput": {},
									"genreasonoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "sm255207"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ss255307_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow10",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"input": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "check CTL file if exist",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CTL_File_Sours",
								"type": "DatasetReference",
								"parameters": {
									"CTL_File_Name": {
										"value": "@variables('CTL_File_Name')",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CTL_File_Name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ss255307"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tp186029_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "tp186029_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"outputstream": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vk255051_DataFlow_Test_PL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "vk255051_test_RIM_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vk255051InputDataset": {},
									"vk255051DFFinalOp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vk255054_test_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_READ_RIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "vk255054_DF_RIM_Transform",
								"type": "DataFlowReference",
								"parameters": {
									"parameter1": {
										"value": "'@{vk}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"vk255054RIMSource": {},
									"vk255054RIMOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vu255001_datatxn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow9",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "vu255001"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vy255007_adf_rim_hist_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "vy255007_RIM_hist_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "vy255007_RIM_hist_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"vy255007opdatachk": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "vy255007"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sample_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "TO unzip the file and load on target source",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "single_file_unzip",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-06-01T07:45:00Z",
						"endTime": "2023-06-02T02:12:15Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								23
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parent_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get record count from data file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "source_count_validation_ds",
								"type": "DatasetReference",
								"parameters": {
									"data_file_name": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"data_file_folder": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set data count variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get record count from data file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "data_count",
							"value": {
								"value": "@string(activity('Get record count from data file').output.count)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Read record count from CTL file",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create CTL file name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "source_ctl_count",
								"type": "DatasetReference",
								"parameters": {
									"ctl_file_name": {
										"value": "@variables('ctl_file_name')",
										"type": "Expression"
									},
									"ctl_folder_name": {
										"value": "@pipeline().parameters.folderPath",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set CTL count variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read record count from CTL file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ctl_count",
							"value": {
								"value": "@string(activity('Read record count from CTL file').output.firstrow.Prop_0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check data and ctl file count",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set data count variable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set CTL count variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('data_count'),variables('ctl_count'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "error_mail_notification_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Only File Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "error_mail_notification_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": {
												"value": "@pipeline().globalParameters.EmailTo",
												"type": "Expression"
											},
											"Activity": "if activity",
											"ErrorMessage": {
												"value": "@concat('Count mismatch in control file : ',variables('ctl_file_name'),' and data file: ',pipeline().parameters.fileName,' in container: ',pipeline().parameters.folderPath)",
												"type": "Expression"
											},
											"Pipe_line_Name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Source_File_Name": {
												"value": "@variables('only_file_name')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ctl files copy to reject and delete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error_mail_notification_pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_delete",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"file_name": {
												"value": "@variables('ctl_file_name')",
												"type": "Expression"
											},
											"folder_name": {
												"value": "@pipeline().parameters.folderPath",
												"type": "Expression"
											},
											"output_folder_name": "reject"
										}
									}
								},
								{
									"name": "data files copy to reject and delete",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error_mail_notification_pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_delete",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"file_name": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"folder_name": {
												"value": "@pipeline().parameters.folderPath",
												"type": "Expression"
											},
											"output_folder_name": "reject"
										}
									}
								},
								{
									"name": "Only File Name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "only_file_name",
										"value": {
											"value": "@substring(pipeline().parameters.fileName,0,lastindexof(pipeline().parameters.fileName,'_'))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "etlcontrol batch script",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "etlcontrol_batch_script",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"folderPath": {
												"value": "@pipeline().parameters.folderPath",
												"type": "Expression"
											},
											"ctlFileName": {
												"value": "@variables('ctl_file_name')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create CTL file name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ctl_file_name",
							"value": {
								"value": "@concat(substring(pipeline().parameters.fileName,0,lastindexof(pipeline().parameters.fileName,'.')),'.ctl')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Error mail notification for CTL file",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read record count from CTL file",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "error_mail_notification_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EmailTo": {
									"value": "@pipeline().globalParameters.EmailTo",
									"type": "Expression"
								},
								"Activity": "Lookup Activity",
								"ErrorMessage": "CTL file is not received",
								"Pipe_line_Name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Source_File_Name": {
									"value": "@variables('ctl_file_name')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "data file copy to reject container and delete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Error mail notification for CTL file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_delete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"file_name": {
									"value": "@pipeline().parameters.fileName",
									"type": "Expression"
								},
								"folder_name": {
									"value": "@pipeline().parameters.folderPath",
									"type": "Expression"
								},
								"output_folder_name": "reject"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					}
				},
				"variables": {
					"data_count": {
						"type": "String"
					},
					"ctl_count": {
						"type": "String"
					},
					"ctl_file_name": {
						"type": "String"
					},
					"file_name1": {
						"type": "String"
					},
					"only_file_name": {
						"type": "String"
					},
					"file_size": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Audit Control Framework Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mb255079_trigger_rim')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "mb255079_pipeline_RIM",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-06-23T14:04:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Etl_Control_Framework_Start')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Source Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "gen_src_ds",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"folder_name": {
										"value": "@pipeline().parameters.folder_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FileSize",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Source Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "file_size",
							"value": {
								"value": "@string(activity('Get Source Metadata').output.size)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ZeroByteFileValidation",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileSize",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('file_size'),'0')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "parent_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "parent_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@pipeline().parameters.file_name",
												"type": "Expression"
											},
											"folderPath": {
												"value": "@pipeline().parameters.folder_name",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "error_mail_notification_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "error_mail_notification_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": {
												"value": "@pipeline().globalParameters.EmailTo",
												"type": "Expression"
											},
											"Activity": "if activity",
											"ErrorMessage": "zero byte data file received",
											"Pipe_line_Name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Source_File_Name": {
												"value": "@pipeline().parameters.file_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "copy delete data file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "error_mail_notification_pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_delete",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"file_name": {
												"value": "@pipeline().parameters.file_name",
												"type": "Expression"
											},
											"folder_name": {
												"value": "@pipeline().parameters.folder_name",
												"type": "Expression"
											},
											"output_folder_name": "reject"
										}
									}
								},
								{
									"name": "Create CTL file name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "error_mail_notification_pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ctl_file_name",
										"value": {
											"value": "@concat(substring(pipeline().parameters.file_name,0,lastindexof(pipeline().parameters.file_name,'.')),'.ctl')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "copy delete CTL file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Read record count from CTL file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_delete",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"file_name": {
												"value": "@variables('ctl_file_name')",
												"type": "Expression"
											},
											"folder_name": {
												"value": "@pipeline().parameters.folder_name",
												"type": "Expression"
											},
											"output_folder_name": "reject"
										}
									}
								},
								{
									"name": "Read record count from CTL file",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Create CTL file name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"dataset": {
											"referenceName": "source_ctl_count",
											"type": "DatasetReference",
											"parameters": {
												"ctl_file_name": {
													"value": "@variables('ctl_file_name')",
													"type": "Expression"
												},
												"ctl_folder_name": {
													"value": "@pipeline().parameters.folder_name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Error mail notification for CTL file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Read record count from CTL file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "error_mail_notification_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": {
												"value": "@pipeline().globalParameters.EmailTo",
												"type": "Expression"
											},
											"Activity": "Lookup Activity",
											"ErrorMessage": "CTL file is not received",
											"Pipe_line_Name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Source_File_Name": {
												"value": "@variables('ctl_file_name')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"file_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"variables": {
					"db_server": {
						"type": "String"
					},
					"db_user": {
						"type": "String"
					},
					"db_password": {
						"type": "String"
					},
					"count": {
						"type": "String"
					},
					"ctl_count": {
						"type": "String"
					},
					"file_size": {
						"type": "String"
					},
					"ctl_file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Audit Control Framework Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/parent_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_employee_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger will work from file name as Employee*.csv in source container.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Etl_Control_Framework_Start",
							"type": "PipelineReference"
						},
						"parameters": {
							"file_name": "[parameters('blob_employee_trigger_properties_Etl_Control_Framework_Start_parameters_file_name')]",
							"folder_name": "[parameters('blob_employee_trigger_properties_Etl_Control_Framework_Start_parameters_folder_name')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/Employee",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('blob_employee_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Etl_Control_Framework_Start')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_insurance_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger will work from file name as Insurance*.csv in source container.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Etl_Control_Framework_Start",
							"type": "PipelineReference"
						},
						"parameters": {
							"file_name": "[parameters('blob_insurance_trigger_properties_Etl_Control_Framework_Start_parameters_file_name')]",
							"folder_name": "[parameters('blob_insurance_trigger_properties_Etl_Control_Framework_Start_parameters_folder_name')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/Insurance",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('blob_insurance_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Etl_Control_Framework_Start')]"
			]
		}
	]
}