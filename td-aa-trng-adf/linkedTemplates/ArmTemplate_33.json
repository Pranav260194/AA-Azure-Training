{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "td-aa-trng-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/hg250013_makeDataPartitioned')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Demo_DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "hg250013_flat_file_source_ds",
								"type": "DatasetReference"
							},
							"name": "FlatSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "hg250013_csv_partitioned_ds",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['input/*']) ~> FlatSource\nFlatSource sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tFlightDate\n\t)) ~> sink4"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/is255014_xfm_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_testFile",
								"type": "DatasetReference"
							},
							"name": "RIMsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output_testFile",
								"type": "DatasetReference"
							},
							"name": "dataflowoutput"
						}
					],
					"transformations": [
						{
							"name": "GenericReason"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> RIMsource\nRIMsource derive(GenericReason = locate(NoSalesReason,'Other')) ~> GenericReason\nGenericReason sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{Flight#^Origin^Dest^FlightDate^NoSalesReason^TransmittingFlightAttd^addedcol} as string\n\t),\n\tpartitionFileNames:['RIM'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dataflowoutput"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ku255007Data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "kufinal",
								"type": "DatasetReference"
							},
							"name": "RIMSourceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ku255007output",
								"type": "DatasetReference"
							},
							"name": "Outputdata"
						}
					],
					"transformations": [
						{
							"name": "Flag"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> RIMSourceData\nRIMSourceData derive(Flag = locate(NoSalesReason,'Other')) ~> Flag\nFlag sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string,\n\t\t{Flag for No sales } as string\n\t),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Outputdata"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ku255007adfrimdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ku255007source",
								"type": "DatasetReference"
							},
							"name": "sourcerim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ku255007output",
								"type": "DatasetReference"
							},
							"name": "sinkoutputdata"
						}
					],
					"transformations": [
						{
							"name": "Flag"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourcerim\nsourcerim derive(Flagfornosales = locate(NoSalesReason,'Other')) ~> Flag\nFlag sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string,\n\t\t{Flag for No sales } as string\n\t),\n\tpartitionFileNames:['output_rim_dataflow.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\t{Flight#},\n\t\tOrigin,\n\t\tDest,\n\t\tFlightDate,\n\t\tNoSalesReason,\n\t\tTransmittingFlightAttd,\n\t\t{Flag for No sales } = Flagfornosales\n\t),\n\tpartitionBy('hash', 1)) ~> sinkoutputdata"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/kv255007_RIM_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "kv255007_dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "kv255007_customer_source",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "kv255007_sales",
								"type": "DatasetReference"
							},
							"name": "Sales"
						},
						{
							"dataset": {
								"referenceName": "stateabb",
								"type": "DatasetReference"
							},
							"name": "State"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "kv255007RimOutput",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "selectcust"
						},
						{
							"name": "castcustomer"
						},
						{
							"name": "windowRowNum"
						},
						{
							"name": "filterDistinct"
						},
						{
							"name": "DataCleaning"
						},
						{
							"name": "selectsales"
						},
						{
							"name": "cast1"
						},
						{
							"name": "UniqueorderId"
						},
						{
							"name": "selectNonduplicate"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregateCustomerID",
							"description": "Aggregating data by 'Customerid' producing columns 'TotalQuantity, TotalPrice'"
						},
						{
							"name": "CustSalesJoin"
						},
						{
							"name": "cast2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Stateabb"
						},
						{
							"name": "window2"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "Quantitylessthan10"
						},
						{
							"name": "orderfilter"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          OrderDate as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Sales",
						"source(output(",
						"          State as string,",
						"          {abbreviations } as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> State",
						"Customer select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcust",
						"selectcust cast(output(",
						"          CustomerID as integer",
						"     ),",
						"     errors: true) ~> castcustomer",
						"castcustomer window(over(CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country),",
						"     asc(CustomerID, true),",
						"     rownum = rowNumber()) ~> windowRowNum",
						"windowRowNum filter(rownum==1) ~> filterDistinct",
						"filterDistinct derive(FirstName = initCap(lower(FirstName)),",
						"          LastName = initCap(lower(LastName)),",
						"          Email = trim(Email),",
						"          FullName = initCap(lower(FirstName))+\" \"+initCap(lower(LastName)),",
						"          Address = replace(Address , '$','')) ~> DataCleaning",
						"Sales select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectsales",
						"selectsales cast(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          ProductID as integer,",
						"          Quantity as integer,",
						"          Price as float,",
						"          OrderDate as string,",
						"          Region as string",
						"     ),",
						"     errors: true) ~> cast1",
						"window2 filter(rownum==1) ~> UniqueorderId",
						"UniqueorderId select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          ProductID,",
						"          Quantity,",
						"          Price,",
						"          OrderDate,",
						"          Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNonduplicate",
						"select1, Stateabb join(select1@CustomerID == selectNonduplicate@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"DataCleaning select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country,",
						"          FullName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join1 aggregate(groupBy(CustomerId = select1@CustomerID),",
						"     TotalQuantity = sum(Quantity),",
						"          TotalPrice = sum(Price)) ~> aggregateCustomerID",
						"aggregateCustomerID, join1 join(aggregateCustomerID@CustomerId == select1@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CustSalesJoin",
						"selectNonduplicate cast(output(",
						"          OrderDate as timestamp 'MM/dd/yyyy'",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 derive(differences = round((currentTimestamp()-OrderDate)/86400000),",
						"          year = year(OrderDate)) ~> derivedColumn1",
						"derivedColumn1, State lookup(Region == State,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Stateabb",
						"cast1 window(over(OrderID,",
						"          CustomerID),",
						"     asc(CustomerID, true),",
						"     rownum = rowNumber()) ~> window2",
						"selectNonduplicate aggregate(groupBy(ProductID,",
						"          Region),",
						"     TotalQuantity = sum(Quantity),",
						"          TotalPrice = sum(Price),",
						"          avg_sales_price = sum(Price)/sum(Quantity)) ~> aggregate1",
						"aggregate1 filter(TotalQuantity<10) ~> Quantitylessthan10",
						"Quantitylessthan10 filter(TotalPrice>10.0) ~> orderfilter",
						"CustSalesJoin select(mapColumn(",
						"          CustomerId = aggregateCustomerID@CustomerId,",
						"          FullName,",
						"          TotalQuantity,",
						"          TotalPrice,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country,",
						"          OrderID,",
						"          ProductID,",
						"          Quantity,",
						"          Price,",
						"          OrderDate,",
						"          Region,",
						"          differences,",
						"          year,",
						"          {abbreviations }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Output"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mb255079_RIM_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "mb255079_src_customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "mb255079_src_sales",
								"type": "DatasetReference"
							},
							"name": "Sales"
						},
						{
							"dataset": {
								"referenceName": "mb255079_statelist",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "mb255079rimoutput",
								"type": "DatasetReference"
							},
							"name": "OutputDS",
							"rejectedDataLinkedService": {
								"referenceName": "adls_ls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "selectcust1"
						},
						{
							"name": "windowRowNum"
						},
						{
							"name": "filterDistinct"
						},
						{
							"name": "DataCleaning"
						},
						{
							"name": "selectSales1"
						},
						{
							"name": "window1"
						},
						{
							"name": "UniqueOrderID"
						},
						{
							"name": "selectNonDupes"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "castSales"
						},
						{
							"name": "castCustomer"
						},
						{
							"name": "quantityless10"
						},
						{
							"name": "orderfilter"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "select1"
						},
						{
							"name": "Stateabb"
						},
						{
							"name": "join1"
						},
						{
							"name": "aggregateCustomerID"
						},
						{
							"name": "joinCustSales"
						},
						{
							"name": "RemoveExtras"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          OrderID as string,",
						"          CustomerID as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          Price as string,",
						"          OrderDate as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Sales",
						"source(output(",
						"          State as string,",
						"          {abbreviations } as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"customer select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcust1",
						"castCustomer window(over(CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country),",
						"     asc(CustomerID, true),",
						"     rownum = rowNumber()) ~> windowRowNum",
						"windowRowNum filter(rownum==1) ~> filterDistinct",
						"filterDistinct derive(FirstName = initCap(lower(FirstName)),",
						"          LastName = initCap(lower(LastName)),",
						"          Email = trim(Email),",
						"          FullName = initCap(lower(FirstName))+\" \"+initCap(lower(LastName)),",
						"          Address = replace(Address,'$','')) ~> DataCleaning",
						"Sales select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          ProductID,",
						"          Quantity,",
						"          Price,",
						"          OrderDate,",
						"          Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSales1",
						"castSales window(over(OrderID,",
						"          CustomerID),",
						"     asc(CustomerID, true),",
						"     rownum = rowNumber()) ~> window1",
						"window1 filter(rownum==1) ~> UniqueOrderID",
						"UniqueOrderID select(mapColumn(",
						"          OrderID,",
						"          CustomerID,",
						"          ProductID,",
						"          Quantity,",
						"          Price,",
						"          OrderDate,",
						"          Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNonDupes",
						"selectNonDupes aggregate(groupBy(ProductID,",
						"          Region),",
						"     TotalQuantity = sum(Quantity),",
						"          TotalPrice = sum(Price),",
						"          avg_sales_price = sum(Price)/sum(Quantity)) ~> aggregate1",
						"selectSales1 cast(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          ProductID as integer,",
						"          Quantity as integer,",
						"          Price as float,",
						"          OrderDate as string,",
						"          Region as string",
						"     ),",
						"     errors: true) ~> castSales",
						"selectcust1 cast(output(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     errors: true) ~> castCustomer",
						"aggregate1 filter(TotalQuantity<10) ~> quantityless10",
						"quantityless10 filter(TotalPrice>10.0) ~> orderfilter",
						"cast1 derive(difference = round((currentTimestamp()-OrderDate)/86400000),",
						"          year = year(OrderDate)) ~> derivedColumn2",
						"selectNonDupes cast(output(",
						"          OrderDate as timestamp 'MM/dd/yyyy'",
						"     ),",
						"     errors: true) ~> cast1",
						"DataCleaning select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country,",
						"          FullName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"derivedColumn2, source1 lookup(Region == State,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Stateabb",
						"select1, Stateabb join(select1@CustomerID == selectNonDupes@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(Customerid = select1@CustomerID),",
						"     TotalQuantity = sum(Quantity),",
						"          TotalPrice = sum(Price)) ~> aggregateCustomerID",
						"aggregateCustomerID, join1 join(aggregateCustomerID@Customerid == select1@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustSales",
						"joinCustSales select(mapColumn(",
						"          Customerid = aggregateCustomerID@Customerid,",
						"          FullName,",
						"          TotalQuantity,",
						"          TotalPrice,",
						"          Email,",
						"          Address,",
						"          City,",
						"          Country,",
						"          OrderID,",
						"          ProductID,",
						"          Quantity,",
						"          Price,",
						"          OrderDate,",
						"          Region,",
						"          difference,",
						"          year,",
						"          {abbreviations }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveExtras",
						"RemoveExtras sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['mb255079rimoutput'],",
						"     umask: 0000,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     partitionBy('hash', 1)) ~> OutputDS"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mm255199_rim_hist_aggr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "mm255199_rim_input",
								"type": "DatasetReference"
							},
							"name": "Riminput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "mm255199_Rim_Output",
								"type": "DatasetReference"
							},
							"name": "mm255199rimoutput"
						}
					],
					"transformations": [
						{
							"name": "GenericReason"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Flight#} as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          TransmittingFlightAttd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Riminput",
						"Riminput derive(GenericReason = locate(NoSalesReason,'Other')) ~> GenericReason",
						"GenericReason sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> mm255199rimoutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/npdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_File",
								"type": "DatasetReference"
							},
							"name": "InputFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "generic_reason_new_col",
								"type": "DatasetReference"
							},
							"name": "genericreason"
						}
					],
					"transformations": [
						{
							"name": "ReasonGeneric",
							"description": "derived column"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Flight#} as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          TransmittingFlightAttd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InputFile",
						"InputFile derive({No_Sales_Generic_Reason } = locate(NoSalesReason,'Other')) ~> ReasonGeneric",
						"ReasonGeneric sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genericreason"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nt255028_usecase_demo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "usecase_demo_dataset_ip",
								"type": "DatasetReference"
							},
							"name": "EmpSource"
						},
						{
							"dataset": {
								"referenceName": "usecase_demo_dataset2",
								"type": "DatasetReference"
							},
							"name": "EmpNewSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "usecase_Demo_op",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Union1"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "source(output(\n\t\tEmp_ID as string,\n\t\tEmp_Name as string,\n\t\tCountry as string,\n\t\tDept_No as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpSource\nsource(output(\n\t\tEmp_ID as string,\n\t\tEmp_Name as string,\n\t\tCountry as string,\n\t\tDept_No as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpNewSource\nEmpSource, EmpNewSource union(byName: true)~> Union1\nUnion1 aggregate(groupBy(Emp_ID),\n\teach(match(name!=\"Emp_ID\"), $$ = first($$))) ~> RemoveDuplicates\nRemoveDuplicates sort(asc(Emp_ID, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['usecase_demo_result.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nt255028dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "nt255028_dataset",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "nt255028dataset",
								"type": "DatasetReference"
							},
							"name": "outputrim"
						}
					],
					"transformations": [
						{
							"name": "NewCol"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Source\nSource derive(NewCol = locate(NoSalesReason, 'Other')) ~> NewCol\nNewCol sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> outputrim"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pb255086_data_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PB255086_demo_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PB255086_demo_dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Flight#} as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          TransmittingFlightAttd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(tag = locate(NoSalesReason,'Other')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FlightNo as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          {TransmittingFlightAttd,,,,,} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ru255006_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ru255006_src_data",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ru255006_New_tgt_data",
								"type": "DatasetReference"
							},
							"name": "output1"
						}
					],
					"transformations": [
						{
							"name": "SalChk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          NAME as string,",
						"          DEPARTMENT as string,",
						"          DESIGNATION as string,",
						"          SALARY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Valid_Sal = locate(SALARY, '500')) ~> SalChk",
						"SalChk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['AA_Test_New_Target1_30May.txt'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          NAME,",
						"          DEPARTMENT,",
						"          DESIGNATION,",
						"          SALARY,",
						"          Valid_Sal",
						"     ),",
						"     partitionBy('hash', 1)) ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tp186029_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "rim_copy",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tp186029_RIM",
								"type": "DatasetReference"
							},
							"name": "outputstream"
						}
					],
					"transformations": [
						{
							"name": "GenericReason"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Flight#} as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          TransmittingFlightAttd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(derivedcolumn = locate(NoSalesReason,'Other')) ~> GenericReason",
						"GenericReason sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> outputstream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tp186029_prep1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tp186029_dataset",
								"type": "DatasetReference"
							},
							"name": "Rim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdata",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Flight#} as string,",
						"          Origin as string,",
						"          Dest as string,",
						"          FlightDate as string,",
						"          NoSalesReason as string,",
						"          TransmittingFlightAttd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Rim",
						"Rim derive({Generic reason} = locate(NoSalesReason,'Other')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Flight#^Origin^Dest^FlightDate^NoSalesReason^TransmittingFlightAttd} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vk255051_test_RIM_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vk255051_Input_Dataset",
								"type": "DatasetReference"
							},
							"name": "vk255051InputDataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "vk255051_Output_File_ds",
								"type": "DatasetReference"
							},
							"name": "vk255051DFFinalOp"
						}
					],
					"transformations": [
						{
							"name": "vk255051DerviceColOp"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> vk255051InputDataset\nvk255051InputDataset derive(ReasonFlag = locate(NoSalesReason, 'Other')) ~> vk255051DerviceColOp\nvk255051DerviceColOp sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vk255051DFFinalOp"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vk255054_DF_RIM_Transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vk255054_RIM_Input",
								"type": "DatasetReference"
							},
							"name": "vk255054RIMSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "vk255054_RIM_Output",
								"type": "DatasetReference"
							},
							"name": "vk255054RIMOutput"
						}
					],
					"transformations": [
						{
							"name": "vk255054DerviceColOutput"
						}
					],
					"script": "parameters{\n\tparameter1 as string\n}\nsource(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> vk255054RIMSource\nvk255054RIMSource derive(DerivedCol1 = locate(NoSalesReason, 'Other')) ~> vk255054DerviceColOutput\nvk255054DerviceColOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vk255054RIMOutput"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vy255007_RIM_hist_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "vy255007"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vy255007_demo_dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "vy255007_op_data_chk",
								"type": "DatasetReference"
							},
							"name": "vy255007opdatachk"
						}
					],
					"transformations": [
						{
							"name": "GenericReason"
						}
					],
					"script": "source(output(\n\t\t{Flight#} as string,\n\t\tOrigin as string,\n\t\tDest as string,\n\t\tFlightDate as string,\n\t\tNoSalesReason as string,\n\t\tTransmittingFlightAttd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(Data_Check = locate(NoSalesReason,'Other')) ~> GenericReason\nGenericReason sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vy255007opdatachk"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/255196_dft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "sk255196"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS2Vantage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ADLS2Vantage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "OdbcSink",
								"writeBatchSize": 0
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BUSINESS_UNIT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BUSINESS_UNIT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ASSET_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ASSET_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EFFDT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EFFDT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OWNING_BUS_UNIT7",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OWNING_BUS_UNIT7",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ReadCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Odbc_Vantage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "VANTAGE"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:53:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Airline_Data_Flow_aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Aggreate airline data by Reason",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Airlines_data_transformations",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AirlineData": {},
									"StoreResult": {},
									"StoreFilteredRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DN255032"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-26T09:54:13Z"
			},
			"dependsOn": []
		}
	]
}